openapi: 3.0.3
info:
  title: API Chipmunk Kombat
  description: API External Chipmunk Kombat
  version: 1.0.0
servers:
  - url: https://nyx-backend.up.railway.app/api/v1/external
  - url: http://localhost:3000/api/v1/external
  - url: https://nyx-backend-production.up.railway.app/api/v1/external
tags:
  - name: Auth
paths:
  /user/info:
    get:
      # tags:
      summary: User Information
      operationId: userInformation
      parameters:
        - name: userId
          in: query
          schema:
            type: string
            example: "1"
        - name: token
          in: header
          schema:
            type: string
            example: bearer ...
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: "1"
      responses:
        "200":
          description: ""
  /user/referrals:
    get:
      # tags:
      summary: User Referral
      operationId: userReferral
      parameters:
        - name: limit
          in: query
          schema:
            type: string
            example: "10"
        - name: page
          in: query
          schema:
            type: string
            example: "1"
        - name: token
          in: header
          schema:
            type: string
            example: bearer ...
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: "1"
      responses:
        "200":
          description: ""
  /leaderboard:
    get:
      # tags:
      summary: Leaderboard
      operationId: leaderboard
      parameters:
        - name: token
          in: header
          schema:
            type: string
            example: bearer ...
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: "1"
      responses:
        "200":
          description: ""
  /my-transactions:
    get:
      # tags:
      summary: My Transactions
      operationId: myTransactions
      parameters:
        - name: limit
          in: query
          schema:
            type: string
            example: "2"
        - name: page
          in: query
          schema:
            type: string
            example: "1"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: "1"
      responses:
        "200":
          description: ""
  /live-transactions:
    get:
      # tags:
      summary: Live Transactions
      operationId: liveTransactions
      parameters:
        - name: limit
          in: query
          schema:
            type: string
            example: "2"
        - name: page
          in: query
          schema:
            type: string
            example: "1"
        - name: token
          in: header
          schema:
            type: string
            example: bearer ...
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: "1"
      responses:
        "200":
          description: ""
  /batch:
    get:
      # tags:
      summary: Batch Information
      operationId: batchInformation
      parameters:
        - name: type
          in: query
          schema:
            type: string
            example: PRESALE
        - name: token
          in: header
          schema:
            type: string
            example: bearer ...
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: "1"
      responses:
        "200":
          description: ""
  /verify:
    get:
      # tags:
      summary: Verify Token
      operationId: verifyToken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: "12"
      responses:
        "200":
          description: ""
    post:
      summary: Verify Telegram Code
      operationId: verifyTelegramCode
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  example: "123456"
                phone:
                  type: string
                  example: "081288001122"
                token:
                  type: string
                  example: ZnSf4
      responses:
        "200":
          description: ""
  /buy:
    post:
      # tags:
      summary: Buy Coins
      operationId: buyCoins
      parameters:
        - name: userId
          in: query
          schema:
            type: string
            example: "1"
        - name: token
          in: header
          schema:
            type: string
            example: bearer ...
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chain:
                  type: string
                  example: BSC
                type:
                  type: string
                  example: PRIVATESELL
                fromAddress:
                  type: string
                  example: 0xfBE24bF11676f5249d4bc66bcBA97391AA062bE3
                toAddress:
                  type: string
                  example: 0x0B2bAd20F2c33d4eABDB026A27d0C6E744290122
                amount:
                  type: string
                  example: 0.048
                price:
                  type: string
                  example: 0.00015
                txid:
                  type: string
                  example: 0x6e303cb7cc97c1d70511f0b7cb2021364a82a2f584186504c0aecdbfcf90d226

          text/plain:
            example: >-
              #  {
              #   "chain": "BSC",
              #   "type": "PRIVATESELL",
              #   "fromAddress": "0xfBE24bF11676f5249d4bc66bcBA97391AA062bE3",
              #   "toAddress": "0x0B2bAd20F2c33d4eABDB026A27d0C6E744290122",
              #   "amount": 0.047999999999999994,
              #   "price": 0.00015,
              #   "txid": "0x6e303cb7cc97c1d70511f0b7cb2021364a82a2f584186504c0aecdbfcf90d226"
              # }
      responses:
        "200":
          description: ""
  /send-code:
    post:
      # tags:
      summary: Send Code
      operationId: sendCode
      parameters:
        - name: userId
          in: query
          schema:
            type: string
            example: "1"
        - name: token
          in: header
          schema:
            type: string
            example: bearer ...
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                telegramID:
                  type: string
                  example: "0778"
            example:
              telegramID: "0778"
      responses:
        "200":
          description: ""
  /verify-code:
    post:
      # tags:
      summary: Verify Code
      operationId: verifyCode
      parameters:
        - name: userId
          in: query
          schema:
            type: string
            example: "1"
        - name: token
          in: header
          schema:
            type: string
            example: bearer ...
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: number
                  example: 123456
                telegramID:
                  type: string
                  example: "0778"
            example:
              code: 123456
              telegramID: "0778"
      responses:
        "200":
          description: ""
  /user:
    get:
      summary: User Information
      operationId: userInformation1
      parameters:
        - name: token
          in: header
          schema:
            type: string
            example: bearer ...
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                "":
                  type: string
                  example: ""
      responses:
        "200":
          description: ""
  /referrals:
    get:
      summary: User Referrals
      operationId: userReferrals
      parameters:
        - name: orderBy
          in: query
          schema:
            type: string
            example: desc
        - name: limit
          in: query
          schema:
            type: string
            example: "10"
        - name: offset
          in: query
          schema:
            type: string
            example: "10"
        - name: token
          in: header
          schema:
            type: string
            example: bearer ...
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                "":
                  type: string
                  example: ""
      responses:
        "200":
          description: ""
  /login:
    post:
      summary: Login By Phone Number
      operationId: loginByPhoneNumber
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                agent:
                  type: string
                  example: chrome
                ip:
                  type: string
                  example: 127.0.0.1
                phone:
                  type: string
                  example: "081288001122"
      responses:
        "200":
          description: ""
components:
  schemas:
    AnyValue:
      anyOf:
        - type: string
        - type: number
        - type: integer
        - type: boolean
        - type: array
          items: {}
        - type: object
    BasicResponse:
      type: object
      properties:
        status:
          type: boolean
        message:
          type: string
        error:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
